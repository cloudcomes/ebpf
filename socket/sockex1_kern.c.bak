#include <linux/bpf.h>
#include <linux/if_ether.h>
#include <linux/if_packet.h>
#include <linux/ip.h>
#include <bpf_helpers.h>
//#include "bpf_legacy.h"

struct {
	__uint(type, BPF_MAP_TYPE_ARRAY);
	__type(key, __u32);
	__type(value, long);
	__uint(max_entries, 256);
} my_map SEC(".maps");

SEC("socket1")
int bpf_prog1(struct __sk_buff *skb)
{

    //struct icmphdr *icmp, _icmp;
    //struct gre_hdr *gre, _gre;
    //struct ethhdr *eth, _eth;
    // struct tcphdr *tcp, _tcp;
    //struct udphdr *udp, _udp;

    //void *data_end = (void *)(long)skb->data_end;
    void *data = (void *)(long)skb->data;

    struct ethhdr *eth = (struct ethhdr *)(data);
    struct iphdr *iph = data + sizeof(*eth);

    //struct tcphdr *tcp = data + sizeof(*eth) + sizeof(*iph);
    //struct udphdr *udp = data + sizeof(*eth) + sizeof(*iph);
    //struct imcihdr *udp = data + sizeof(*eth) + sizeof(*iph);


    	/* single length check */
    //if (data + sizeof(*eth) + sizeof(*iph) + sizeof(*udp) > data_end)
    //	return 0;

	//int index = load_byte(skb, ETH_HLEN + offsetof(struct iphdr, protocol));
	long *value;

	if (skb->pkt_type != PACKET_OUTGOING)
		return 0;

	value = bpf_map_lookup_elem(&my_map, &iph);
	if (value)
		__sync_fetch_and_add(value, skb->len);

	return 0;
}
char _license[] SEC("license") = "GPL";
