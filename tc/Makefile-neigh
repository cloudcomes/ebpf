# Common Makefile parts for BPF-building with libbpf

KERN_TARGETS := test_tc_neigh
#USER_TARGETS := sockex1_user

LLC ?= llc
CLANG ?= clang
CC ?= gcc

KERN_C = ${KERN_TARGETS:=.c}
KERN_OBJ = ${KERN_C:.c=.o}
#USER_C := ${USER_TARGETS:=.c}
#USER_OBJ := ${USER_C:.c=.o}

# Expect this is defined by including Makefile, but define if not

LIBBPF_DIR ?= ../libbpf/src
OBJECT_LIBBPF = $(LIBBPF_DIR)/libbpf.a

#CFLAGS ?= -I$(LIBBPF_DIR)/build/usr/include/ -g
#CFLAGS += -I../headers/
CFLAGS += -I../libbpf/src
LDFLAGS ?= -L$(LIBBPF_DIR)/
CFLAGS += -g -D__TARGET_ARCH_x86 -mlittle-endian  -Wno-compare-distinct-pointer-types -O2 
CFLAGS += -Wno-unused-command-line-argument -mcpu=v3
#BPF_CFLAGS ?= -I$(LIBBPF_DIR)/build/usr/include/ -I../libbpf/src
BPF_CFLAGS ?= -I../libbpf/src

LIBS = -l:libbpf.a -lelf -lz -lcap -lrt -lpthread $(USER_LIBS)

all: llvm-check $(KERN_OBJ) $(USER_TARGETS)

.PHONY: clean $(CLANG) $(LLC)

clean:
	$(MAKE) -C $(LIBBPF_DIR) clean
	rm -f $(USER_TARGETS) $(KERN_OBJ) $(USER_OBJ)
	rm -f *.ll
	rm -f *~

llvm-check: $(CLANG) $(LLC)
	@for TOOL in $^ ; do \
		if [ ! $$(command -v $${TOOL} 2>/dev/null) ]; then \
			echo "*** ERROR: Cannot find tool $${TOOL}" ;\
			exit 1; \
		else true; fi; \
	done

#$(OBJECT_LIBBPF):
#	@if [ ! -d $(LIBBPF_DIR) ]; then \
#		echo "Error: Need libbpf submodule"; \
#		echo "May need to run git submodule update --init"; \
#		exit 1; \
#	else \
#		cd $(LIBBPF_DIR) && $(MAKE) all OBJDIR=.; \
#		mkdir -p build; $(MAKE) install_headers DESTDIR=build OBJDIR=.; \
#	fi

#$(USER_TARGETS): %: %.c  $(OBJECT_LIBBPF)
#	$(CC) -Wall $(CFLAGS) $(LDFLAGS) -o $@  \
#	 $< $(LIBS)

$(KERN_OBJ): %.o: %.c  
	$(CLANG) -S \
	    -target bpf \
	    $(BPF_CFLAGS) \
	    -emit-llvm -c -g -o ${@:.o=.ll} $<
	$(LLC) -march=bpf -filetype=obj -o $@ ${@:.o=.ll}

