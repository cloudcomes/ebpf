/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __KFREE_SKB_BPF_SKEL_H__
#define __KFREE_SKB_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct kfree_skb_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *fentry_eth_type_trans;
		struct bpf_program *fexit_eth_type_trans;
	} progs;
	struct {
		struct bpf_link *fentry_eth_type_trans;
		struct bpf_link *fexit_eth_type_trans;
	} links;
	struct kfree_skb_bpf__rodata {
	} *rodata;

#ifdef __cplusplus
	static inline struct kfree_skb_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct kfree_skb_bpf *open_and_load();
	static inline int load(struct kfree_skb_bpf *skel);
	static inline int attach(struct kfree_skb_bpf *skel);
	static inline void detach(struct kfree_skb_bpf *skel);
	static inline void destroy(struct kfree_skb_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
kfree_skb_bpf__destroy(struct kfree_skb_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
kfree_skb_bpf__create_skeleton(struct kfree_skb_bpf *obj);

static inline struct kfree_skb_bpf *
kfree_skb_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct kfree_skb_bpf *obj;
	int err;

	obj = (struct kfree_skb_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = kfree_skb_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	kfree_skb_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct kfree_skb_bpf *
kfree_skb_bpf__open(void)
{
	return kfree_skb_bpf__open_opts(NULL);
}

static inline int
kfree_skb_bpf__load(struct kfree_skb_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct kfree_skb_bpf *
kfree_skb_bpf__open_and_load(void)
{
	struct kfree_skb_bpf *obj;
	int err;

	obj = kfree_skb_bpf__open();
	if (!obj)
		return NULL;
	err = kfree_skb_bpf__load(obj);
	if (err) {
		kfree_skb_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
kfree_skb_bpf__attach(struct kfree_skb_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
kfree_skb_bpf__detach(struct kfree_skb_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *kfree_skb_bpf__elf_bytes(size_t *sz);

static inline int
kfree_skb_bpf__create_skeleton(struct kfree_skb_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "kfree_skb_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "kfree_sk.rodata";
	s->maps[0].map = &obj->maps.rodata;
	s->maps[0].mmaped = (void **)&obj->rodata;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "fentry_eth_type_trans";
	s->progs[0].prog = &obj->progs.fentry_eth_type_trans;
	s->progs[0].link = &obj->links.fentry_eth_type_trans;

	s->progs[1].name = "fexit_eth_type_trans";
	s->progs[1].prog = &obj->progs.fexit_eth_type_trans;
	s->progs[1].link = &obj->links.fexit_eth_type_trans;

	s->data = (void *)kfree_skb_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *kfree_skb_bpf__elf_bytes(size_t *sz)
{
	*sz = 3744;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe0\x0a\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0f\0\
\x0e\0\x79\x12\0\0\0\0\0\0\x79\x11\x08\0\0\0\0\0\x61\x14\0\0\0\0\0\0\x61\x23\0\
\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x28\0\0\0\x85\0\0\0\
\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x12\0\0\0\0\0\0\x79\x11\x08\
\0\0\0\0\0\x61\x14\0\0\0\0\0\0\x61\x23\0\0\0\0\0\0\x18\x01\0\0\x28\0\0\0\0\0\0\
\0\0\0\0\0\xb7\x02\0\0\x2b\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\
\0\0\0\0\0\x47\x50\x4c\0\x77\x69\x74\x68\x20\x4c\x32\x20\x68\x65\x61\x64\x65\
\x72\x3a\x73\x6b\x62\x2d\x3e\x6c\x65\x6e\x20\x25\x64\x20\x69\x66\x69\x6e\x64\
\x65\x78\x20\x25\x64\x20\x0a\0\x77\x69\x74\x68\x6f\x75\x74\x20\x4c\x32\x20\x68\
\x65\x61\x64\x65\x72\x3a\x73\x6b\x62\x2d\x3e\x6c\x65\x6e\x20\x25\x64\x20\x69\
\x66\x69\x6e\x64\x65\x78\x20\x25\x64\x20\x0a\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\
\x84\x02\0\0\x84\x02\0\0\xf8\x02\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\0\0\
\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\x18\0\0\0\x01\0\0\0\
\x1c\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x20\0\0\0\x01\0\0\x0c\x03\0\0\0\xce\
\0\0\0\x02\0\0\x04\x10\0\0\0\xd9\0\0\0\x04\0\0\0\0\0\0\0\xe1\0\0\0\x07\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\xe9\0\0\0\0\0\0\x07\0\0\0\0\x3f\x01\0\0\
\x09\0\0\x04\x50\0\0\0\x47\x01\0\0\x0a\0\0\0\0\0\0\0\x4b\x01\0\0\x0a\0\0\0\x20\
\0\0\0\x54\x01\0\0\x0b\0\0\0\x40\0\0\0\x5c\x01\0\0\x0b\0\0\0\x50\0\0\0\x64\x01\
\0\0\x0b\0\0\0\x60\0\0\0\x72\x01\0\0\x0d\0\0\0\x80\0\0\0\x76\x01\0\0\x0e\0\0\0\
\xc0\0\0\0\x7b\x01\0\0\x11\0\0\0\0\x01\0\0\x8d\x01\0\0\x13\0\0\0\0\x01\0\0\x90\
\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\x9d\x01\0\0\0\0\0\x08\x0c\0\0\0\xa3\x01\
\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\
\x02\x0f\0\0\0\xb2\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\xc0\x01\0\0\0\0\0\x01\
\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x10\0\0\0\x12\0\0\0\0\0\0\0\
\xc5\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x10\0\0\0\
\x12\0\0\0\x30\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\x18\0\0\0\x01\0\0\0\xd9\x01\
\0\0\x01\0\0\x0c\x14\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x10\0\0\0\x12\0\0\0\x04\0\
\0\0\x9c\x02\0\0\0\0\0\x0e\x16\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x10\0\0\0\0\0\
\0\0\0\0\0\x03\0\0\0\0\x18\0\0\0\x12\0\0\0\x28\0\0\0\xa5\x02\0\0\0\0\0\x0e\x19\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x18\0\0\0\x12\0\0\0\x2b\0\0\0\xc7\x02\
\0\0\0\0\0\x0e\x1b\0\0\0\0\0\0\0\xe8\x02\0\0\x02\0\0\x0f\0\0\0\0\x1a\0\0\0\0\0\
\0\0\x28\0\0\0\x1c\0\0\0\x28\0\0\0\x2b\0\0\0\xf0\x02\0\0\x01\0\0\x0f\0\0\0\0\
\x17\0\0\0\0\0\0\0\x04\0\0\0\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x69\x6e\x74\0\x66\x65\
\x6e\x74\x72\x79\x5f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\0\
\x66\x65\x6e\x74\x72\x79\x2f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\
\x6e\x73\0\x2f\x72\x6f\x6f\x74\x2f\x63\x6c\x6f\x75\x64\x2f\x65\x62\x70\x66\x2f\
\x6e\x65\x74\x77\x6f\x72\x6b\x2f\x73\x6b\x5f\x62\x75\x66\x66\x2f\x6b\x66\x72\
\x65\x65\x5f\x73\x6b\x62\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\
\x5f\x50\x52\x4f\x47\x28\x66\x65\x6e\x74\x72\x79\x5f\x65\x74\x68\x5f\x74\x79\
\x70\x65\x5f\x74\x72\x61\x6e\x73\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x73\x6b\
\x5f\x62\x75\x66\x66\x20\x2a\x73\x6b\x62\x2c\x20\x73\x74\x72\x75\x63\x74\x20\
\x6e\x65\x74\x5f\x64\x65\x76\x69\x63\x65\x20\x2a\x64\x65\x76\x2c\0\x6e\x65\x74\
\x5f\x64\x65\x76\x69\x63\x65\0\x69\x66\x69\x6e\x64\x65\x78\0\x69\x66\x61\x6c\
\x69\x61\x73\0\x64\x65\x76\x5f\x69\x66\x61\x6c\x69\x61\x73\0\x30\x3a\x30\0\x09\
\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x77\x69\x74\x68\x20\x4c\x32\
\x20\x68\x65\x61\x64\x65\x72\x3a\x73\x6b\x62\x2d\x3e\x6c\x65\x6e\x20\x25\x64\
\x20\x69\x66\x69\x6e\x64\x65\x78\x20\x25\x64\x20\x5c\x6e\x22\x2c\x6c\x65\x6e\
\x2c\x20\x69\x66\x69\x6e\x64\x65\x78\x29\x3b\0\x73\x6b\x5f\x62\x75\x66\x66\0\
\x6c\x65\x6e\0\x64\x61\x74\x61\x5f\x6c\x65\x6e\0\x6d\x61\x63\x5f\x6c\x65\x6e\0\
\x68\x64\x72\x5f\x6c\x65\x6e\0\x71\x75\x65\x75\x65\x5f\x6d\x61\x70\x70\x69\x6e\
\x67\0\x64\x65\x76\0\x64\x61\x74\x61\0\x5f\x5f\x70\x6b\x74\x5f\x74\x79\x70\x65\
\x5f\x6f\x66\x66\x73\x65\x74\0\x63\x62\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x69\x6e\x74\0\x5f\x5f\x75\x31\x36\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\
\x68\x6f\x72\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x63\
\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\
\x45\x5f\x5f\0\x66\x65\x78\x69\x74\x5f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\
\x72\x61\x6e\x73\0\x66\x65\x78\x69\x74\x2f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\
\x74\x72\x61\x6e\x73\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x66\
\x65\x78\x69\x74\x5f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\
\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x73\x6b\x5f\x62\x75\x66\x66\x20\x2a\x73\
\x6b\x62\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x6e\x65\x74\x5f\x64\x65\x76\x69\
\x63\x65\x20\x2a\x64\x65\x76\x2c\0\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\
\x28\x22\x77\x69\x74\x68\x6f\x75\x74\x20\x4c\x32\x20\x68\x65\x61\x64\x65\x72\
\x3a\x73\x6b\x62\x2d\x3e\x6c\x65\x6e\x20\x25\x64\x20\x69\x66\x69\x6e\x64\x65\
\x78\x20\x25\x64\x20\x5c\x6e\x22\x2c\x6c\x65\x6e\x2c\x20\x69\x66\x69\x6e\x64\
\x65\x78\x29\x3b\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x5f\x5f\x5f\x5f\x66\x65\
\x6e\x74\x72\x79\x5f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\
\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x66\x65\x78\x69\x74\x5f\x65\
\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\x2e\x5f\x5f\x5f\x5f\x66\
\x6d\x74\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\
\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\0\0\0\x74\0\0\0\x98\0\0\0\x54\0\0\0\x08\
\0\0\0\x36\0\0\0\x01\0\0\0\0\0\0\0\x05\0\0\0\xee\x01\0\0\x01\0\0\0\0\0\0\0\x15\
\0\0\0\x10\0\0\0\x36\0\0\0\x03\0\0\0\0\0\0\0\x4c\0\0\0\x7d\0\0\0\x05\x78\0\0\
\x10\0\0\0\x4c\0\0\0\xf9\0\0\0\x02\xac\0\0\x40\0\0\0\x4c\0\0\0\x7d\0\0\0\x05\
\x78\0\0\xee\x01\0\0\x03\0\0\0\0\0\0\0\x4c\0\0\0\x03\x02\0\0\x05\xc0\0\0\x10\0\
\0\0\x4c\0\0\0\x53\x02\0\0\x02\xfc\0\0\x40\0\0\0\x4c\0\0\0\x03\x02\0\0\x05\xc0\
\0\0\x10\0\0\0\x36\0\0\0\x02\0\0\0\x10\0\0\0\x06\0\0\0\xf5\0\0\0\0\0\0\0\x18\0\
\0\0\x09\0\0\0\xf5\0\0\0\0\0\0\0\xee\x01\0\0\x02\0\0\0\x10\0\0\0\x06\0\0\0\xf5\
\0\0\0\0\0\0\0\x18\0\0\0\x09\0\0\0\xf5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xcc\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x14\0\0\0\x01\0\x05\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\x36\0\0\0\x01\0\x05\
\0\x28\0\0\0\0\0\0\0\x2b\0\0\0\0\0\0\0\0\0\0\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc3\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\x57\0\0\0\x12\0\x02\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x6d\
\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\
\0\x06\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x70\x02\0\0\0\0\0\0\x0a\0\0\
\0\x06\0\0\0\x7c\x02\0\0\0\0\0\0\x0a\0\0\0\x06\0\0\0\x94\x02\0\0\0\0\0\0\0\0\0\
\0\x07\0\0\0\x2c\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x3c\0\0\0\0\0\0\0\0\0\0\0\x05\
\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\x70\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x88\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x98\0\
\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xa8\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\xc4\0\0\0\0\
\0\0\0\0\0\0\0\x04\0\0\0\xd4\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\xec\0\0\0\0\0\0\0\
\0\0\0\0\x05\0\0\0\xfc\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x32\x33\x31\x27\x28\0\
\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x5f\
\x5f\x5f\x5f\x66\x65\x6e\x74\x72\x79\x5f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\
\x74\x72\x61\x6e\x73\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x66\x65\
\x78\x69\x74\x5f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x66\x65\x6e\x74\x72\x79\x5f\x65\x74\x68\x5f\x74\
\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\0\x66\x65\x78\x69\x74\x5f\x65\x74\x68\x5f\
\x74\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\0\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\
\x79\x2f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\x6e\x73\0\x2e\x72\x65\
\x6c\x66\x65\x78\x69\x74\x2f\x65\x74\x68\x5f\x74\x79\x70\x65\x5f\x74\x72\x61\
\x6e\x73\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\
\x63\x65\x6e\x73\x65\0\x6b\x66\x72\x65\x65\x5f\x73\x6b\x62\x2e\x62\x70\x66\x2e\
\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\
\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x86\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\
\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xa0\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x50\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc4\0\0\0\x01\
\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xec\0\0\0\x01\0\0\0\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xe4\0\0\0\0\0\0\0\x53\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x37\x01\0\0\0\0\0\0\x94\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\
\x06\0\0\0\0\0\0\x0c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xe4\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x07\0\0\0\0\0\
\0\xf0\0\0\0\0\0\0\0\x0e\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\
\x82\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x08\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x08\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x9c\0\0\0\
\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x08\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x08\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf4\0\0\0\x09\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x08\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x08\0\0\
\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x18\x09\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x08\0\0\0\x07\0\0\
\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb5\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\
\0\0\0\0\0\0\0\0\0\0\xd8\x09\0\0\0\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdc\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xdd\x09\0\0\0\0\0\0\xfd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct kfree_skb_bpf *kfree_skb_bpf::open(const struct bpf_object_open_opts *opts) { return kfree_skb_bpf__open_opts(opts); }
struct kfree_skb_bpf *kfree_skb_bpf::open_and_load() { return kfree_skb_bpf__open_and_load(); }
int kfree_skb_bpf::load(struct kfree_skb_bpf *skel) { return kfree_skb_bpf__load(skel); }
int kfree_skb_bpf::attach(struct kfree_skb_bpf *skel) { return kfree_skb_bpf__attach(skel); }
void kfree_skb_bpf::detach(struct kfree_skb_bpf *skel) { kfree_skb_bpf__detach(skel); }
void kfree_skb_bpf::destroy(struct kfree_skb_bpf *skel) { kfree_skb_bpf__destroy(skel); }
const void *kfree_skb_bpf::elf_bytes(size_t *sz) { return kfree_skb_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
kfree_skb_bpf__assert(struct kfree_skb_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __KFREE_SKB_BPF_SKEL_H__ */
