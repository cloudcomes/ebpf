/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __LSM_BPF_SKEL_H__
#define __LSM_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct lsm_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *buffer;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *check_argc0;
	} progs;
	struct {
		struct bpf_link *check_argc0;
	} links;
	struct lsm_bpf__rodata {
	} *rodata;

#ifdef __cplusplus
	static inline struct lsm_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct lsm_bpf *open_and_load();
	static inline int load(struct lsm_bpf *skel);
	static inline int attach(struct lsm_bpf *skel);
	static inline void detach(struct lsm_bpf *skel);
	static inline void destroy(struct lsm_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
lsm_bpf__destroy(struct lsm_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
lsm_bpf__create_skeleton(struct lsm_bpf *obj);

static inline struct lsm_bpf *
lsm_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct lsm_bpf *obj;
	int err;

	obj = (struct lsm_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = lsm_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	lsm_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct lsm_bpf *
lsm_bpf__open(void)
{
	return lsm_bpf__open_opts(NULL);
}

static inline int
lsm_bpf__load(struct lsm_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct lsm_bpf *
lsm_bpf__open_and_load(void)
{
	struct lsm_bpf *obj;
	int err;

	obj = lsm_bpf__open();
	if (!obj)
		return NULL;
	err = lsm_bpf__load(obj);
	if (err) {
		lsm_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
lsm_bpf__attach(struct lsm_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
lsm_bpf__detach(struct lsm_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *lsm_bpf__elf_bytes(size_t *sz);

static inline int
lsm_bpf__create_skeleton(struct lsm_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "lsm_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "buffer";
	s->maps[0].map = &obj->maps.buffer;

	s->maps[1].name = "lsm_bpf.rodata";
	s->maps[1].map = &obj->maps.rodata;
	s->maps[1].mmaped = (void **)&obj->rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "check_argc0";
	s->progs[0].prog = &obj->progs.check_argc0;
	s->progs[0].link = &obj->links.check_argc0;

	s->data = (void *)lsm_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *lsm_bpf__elf_bytes(size_t *sz)
{
	*sz = 5016;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x18\x10\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0e\0\
\x0d\0\x79\x17\0\0\0\0\0\0\x61\x73\x58\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xb7\x02\0\0\x0f\0\0\0\x85\0\0\0\x06\0\0\0\x79\x73\x60\0\0\0\0\0\x18\x01\
\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1a\0\0\0\x85\0\0\0\x06\0\0\0\x61\
\x71\x58\0\0\0\0\0\x55\x01\x1b\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x14\x02\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\xbf\x06\0\0\0\
\0\0\0\x15\x06\x14\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x06\0\
\0\0\0\0\0\x18\x01\0\0\x29\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x12\0\0\0\xbf\x03\
\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\xbf\x61\0\0\0\0\0\0\x07\x01\0\0\x04\0\0\0\xb7\
\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x79\x73\x60\0\0\0\0\0\xbf\x61\0\0\0\0\0\
\0\x07\x01\0\0\x14\0\0\0\xb7\x02\0\0\0\x02\0\0\x85\0\0\0\x2d\0\0\0\xbf\x61\0\0\
\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\x84\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\
\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x61\x72\x67\x63\x20\x69\x73\x20\x20\x3d\x20\x25\x64\x0a\0\x63\
\x75\x72\x72\x65\x6e\x74\x20\x66\x69\x6c\x65\x6e\x61\x6d\x65\x20\x69\x73\x20\
\x3d\x20\x25\x73\x0a\0\x63\x75\x72\x72\x65\x6e\x74\x20\x70\x69\x64\x20\x3d\x20\
\x25\x64\x0a\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x0c\x04\0\0\x0c\x04\0\0\x63\x04\
\0\0\0\0\0\0\x02\0\0\x04\x10\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\x06\0\0\0\x06\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\x02\x04\0\0\0\x12\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x05\0\0\0\x1b\0\0\0\x16\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x07\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\
\x03\0\0\0\x05\0\0\0\0\0\x04\0\x2a\0\0\0\0\0\0\x0e\x01\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\x02\x0a\0\0\0\x31\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\
\x0d\x03\0\0\0\x48\0\0\0\x09\0\0\0\x4c\0\0\0\x01\0\0\x0c\x0b\0\0\0\xd2\0\0\0\
\x1a\0\0\x84\xa0\x01\0\0\xdf\0\0\0\x0e\0\0\0\0\0\0\0\xe3\0\0\0\x0f\0\0\0\x40\0\
\0\0\xed\0\0\0\x10\0\0\0\x80\0\0\0\xf0\0\0\0\x0f\0\0\0\xc0\0\0\0\xf2\0\0\0\x0f\
\0\0\0\0\x01\0\0\xf9\0\0\0\x11\0\0\0\x40\x01\0\x01\x05\x01\0\0\x11\0\0\0\x41\
\x01\0\x01\x12\x01\0\0\x11\0\0\0\x42\x01\0\x01\x1d\x01\0\0\x11\0\0\0\x43\x01\0\
\x01\x30\x01\0\0\x12\0\0\0\x80\x01\0\0\x3b\x01\0\0\x12\0\0\0\xc0\x01\0\0\x47\
\x01\0\0\x12\0\0\0\0\x02\0\0\x4c\x01\0\0\x13\0\0\0\x40\x02\0\0\x51\x01\0\0\x03\
\0\0\0\x80\x02\0\0\x58\x01\0\0\x11\0\0\0\xa0\x02\0\0\x62\x01\0\0\x03\0\0\0\xc0\
\x02\0\0\x67\x01\0\0\x03\0\0\0\xe0\x02\0\0\x6c\x01\0\0\x14\0\0\0\0\x03\0\0\x75\
\x01\0\0\x14\0\0\0\x40\x03\0\0\x7c\x01\0\0\x14\0\0\0\x80\x03\0\0\x83\x01\0\0\
\x11\0\0\0\xc0\x03\0\0\x90\x01\0\0\x03\0\0\0\xe0\x03\0\0\x97\x01\0\0\x0f\0\0\0\
\0\x04\0\0\x9e\x01\0\0\x0f\0\0\0\x40\x04\0\0\xa3\x01\0\0\x17\0\0\0\x80\x04\0\0\
\xae\x01\0\0\x19\0\0\0\0\x05\0\0\0\0\0\0\0\0\0\x02\x28\0\0\0\xb2\x01\0\0\0\0\0\
\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x02\x27\0\0\0\xc4\x01\0\0\0\0\0\x01\x04\
\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x26\0\0\0\0\0\0\0\0\0\0\x02\x25\0\0\0\0\0\0\
\0\0\0\0\x02\x15\0\0\0\0\0\0\0\0\0\0\x0a\x16\0\0\0\xd1\x01\0\0\0\0\0\x01\x01\0\
\0\0\x08\0\0\x01\xd6\x01\0\0\x02\0\0\x04\x10\0\0\0\xdd\x01\0\0\x18\0\0\0\0\0\0\
\0\xe6\x01\0\0\x18\0\0\0\x40\0\0\0\xef\x01\0\0\0\0\0\x08\x0f\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x16\0\0\0\x05\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x16\0\0\
\0\x05\0\0\0\x0d\0\0\0\xe0\x03\0\0\0\0\0\x0e\x1a\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x15\0\0\0\x05\0\0\0\x0f\0\0\0\xe9\x03\0\0\0\0\0\x0e\x1c\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x05\0\0\0\x1a\0\0\0\x01\x04\0\0\0\0\0\
\x0e\x1e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x05\0\0\0\x12\0\0\0\
\x1b\x04\0\0\0\0\0\x0e\x20\0\0\0\0\0\0\0\x34\x04\0\0\x01\0\0\x0f\0\0\0\0\x08\0\
\0\0\0\0\0\0\x10\0\0\0\x3a\x04\0\0\x03\0\0\x0f\0\0\0\0\x1d\0\0\0\0\0\0\0\x0f\0\
\0\0\x1f\0\0\0\x0f\0\0\0\x1a\0\0\0\x21\0\0\0\x29\0\0\0\x12\0\0\0\x42\x04\0\0\
\x01\0\0\x0f\0\0\0\0\x1b\0\0\0\0\0\0\0\x0d\0\0\0\x4c\x01\0\0\0\0\0\x07\0\0\0\0\
\x47\x01\0\0\0\0\0\x07\0\0\0\0\x4a\x04\0\0\0\0\0\x07\0\0\0\0\x54\x04\0\0\0\0\0\
\x07\0\0\0\0\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\
\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\
\x45\x5f\x5f\0\x62\x75\x66\x66\x65\x72\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\
\x20\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x63\x68\
\x65\x63\x6b\x5f\x61\x72\x67\x63\x30\0\x6c\x73\x6d\x2f\x62\x70\x72\x6d\x5f\x63\
\x68\x65\x63\x6b\x5f\x73\x65\x63\x75\x72\x69\x74\x79\0\x2f\x72\x6f\x6f\x74\x2f\
\x63\x6c\x6f\x75\x64\x2f\x65\x62\x70\x66\x2f\x73\x65\x63\x75\x72\x69\x74\x79\
\x2f\x61\x72\x67\x63\x2f\x73\x72\x63\x2f\x6c\x73\x6d\x2e\x62\x70\x66\x2e\x63\0\
\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x63\x68\x65\x63\x6b\x5f\
\x61\x72\x67\x63\x30\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x6c\x69\x6e\x75\x78\
\x5f\x62\x69\x6e\x70\x72\x6d\x20\x2a\x62\x70\x72\x6d\x29\0\x6c\x69\x6e\x75\x78\
\x5f\x62\x69\x6e\x70\x72\x6d\0\x76\x6d\x61\0\x76\x6d\x61\x5f\x70\x61\x67\x65\
\x73\0\x6d\x6d\0\x70\0\x61\x72\x67\x6d\x69\x6e\0\x68\x61\x76\x65\x5f\x65\x78\
\x65\x63\x66\x64\0\x65\x78\x65\x63\x66\x64\x5f\x63\x72\x65\x64\x73\0\x73\x65\
\x63\x75\x72\x65\x65\x78\x65\x63\0\x70\x6f\x69\x6e\x74\x5f\x6f\x66\x5f\x6e\x6f\
\x5f\x72\x65\x74\x75\x72\x6e\0\x65\x78\x65\x63\x75\x74\x61\x62\x6c\x65\0\x69\
\x6e\x74\x65\x72\x70\x72\x65\x74\x65\x72\0\x66\x69\x6c\x65\0\x63\x72\x65\x64\0\
\x75\x6e\x73\x61\x66\x65\0\x70\x65\x72\x5f\x63\x6c\x65\x61\x72\0\x61\x72\x67\
\x63\0\x65\x6e\x76\x63\0\x66\x69\x6c\x65\x6e\x61\x6d\x65\0\x69\x6e\x74\x65\x72\
\x70\0\x66\x64\x70\x61\x74\x68\0\x69\x6e\x74\x65\x72\x70\x5f\x66\x6c\x61\x67\
\x73\0\x65\x78\x65\x63\x66\x64\0\x6c\x6f\x61\x64\x65\x72\0\x65\x78\x65\x63\0\
\x72\x6c\x69\x6d\x5f\x73\x74\x61\x63\x6b\0\x62\x75\x66\0\x6c\x6f\x6e\x67\x20\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x69\x6e\x74\0\x63\x68\x61\x72\0\x72\x6c\x69\x6d\x69\x74\0\x72\x6c\x69\
\x6d\x5f\x63\x75\x72\0\x72\x6c\x69\x6d\x5f\x6d\x61\x78\0\x5f\x5f\x6b\x65\x72\
\x6e\x65\x6c\x5f\x75\x6c\x6f\x6e\x67\x5f\x74\0\x30\x3a\x31\x35\0\x20\x20\x20\
\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x61\x72\x67\x63\x20\x69\
\x73\x20\x20\x3d\x20\x25\x64\x5c\x6e\x22\x2c\x20\x62\x70\x72\x6d\x2d\x3e\x61\
\x72\x67\x63\x29\x3b\0\x30\x3a\x31\x37\0\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\
\x74\x6b\x28\x22\x63\x75\x72\x72\x65\x6e\x74\x20\x66\x69\x6c\x65\x6e\x61\x6d\
\x65\x20\x69\x73\x20\x3d\x20\x25\x73\x5c\x6e\x22\x2c\x20\x62\x70\x72\x6d\x2d\
\x3e\x66\x69\x6c\x65\x6e\x61\x6d\x65\x29\x3b\0\x09\x69\x66\x20\x28\x62\x70\x72\
\x6d\x2d\x3e\x61\x72\x67\x63\x20\x3d\x3d\x20\x30\x29\x20\x7b\0\x09\x65\x76\x65\
\x6e\x74\x20\x3d\x20\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\
\x73\x65\x72\x76\x65\x28\x26\x62\x75\x66\x66\x65\x72\x2c\x20\x73\x69\x7a\x65\
\x6f\x66\x28\x2a\x65\x76\x65\x6e\x74\x29\x2c\x20\x30\x29\x3b\0\x09\x69\x66\x20\
\x28\x65\x76\x65\x6e\x74\x29\x20\x7b\0\x09\x09\x65\x76\x65\x6e\x74\x2d\x3e\x70\
\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\
\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\
\x09\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x63\x75\x72\x72\x65\
\x6e\x74\x20\x70\x69\x64\x20\x3d\x20\x25\x64\x5c\x6e\x22\x2c\x20\x65\x76\x65\
\x6e\x74\x2d\x3e\x70\x69\x64\x29\x3b\0\x09\x09\x62\x70\x66\x5f\x67\x65\x74\x5f\
\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\x26\x65\x76\x65\x6e\x74\
\x2d\x3e\x63\x6f\x6d\x6d\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\x76\x65\x6e\
\x74\x2d\x3e\x63\x6f\x6d\x6d\x29\x29\x3b\0\x09\x09\x62\x70\x66\x5f\x70\x72\x6f\
\x62\x65\x5f\x72\x65\x61\x64\x5f\x73\x74\x72\x28\x26\x65\x76\x65\x6e\x74\x2d\
\x3e\x66\x69\x6c\x65\x6e\x61\x6d\x65\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\
\x76\x65\x6e\x74\x2d\x3e\x66\x69\x6c\x65\x6e\x61\x6d\x65\x29\x2c\x62\x70\x72\
\x6d\x2d\x3e\x66\x69\x6c\x65\x6e\x61\x6d\x65\x29\x3b\0\x09\x09\x62\x70\x66\x5f\
\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\x6d\x69\x74\x28\x65\x76\x65\x6e\
\x74\x2c\x20\x30\x29\x3b\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x5f\x5f\x5f\x5f\
\x63\x68\x65\x63\x6b\x5f\x61\x72\x67\x63\x30\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\
\x5f\x5f\x5f\x5f\x63\x68\x65\x63\x6b\x5f\x61\x72\x67\x63\x30\x2e\x5f\x5f\x5f\
\x5f\x66\x6d\x74\x2e\x31\0\x6c\x6f\x67\x5f\x70\x72\x6f\x63\x65\x73\x73\x5f\x6e\
\x61\x6d\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x2e\x72\
\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\x6d\x6d\x5f\x73\x74\x72\
\x75\x63\x74\0\x76\x6d\x5f\x61\x72\x65\x61\x5f\x73\x74\x72\x75\x63\x74\0\x9f\
\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x2c\x01\0\0\x40\x01\0\0\x4c\0\
\0\0\x08\0\0\0\x58\0\0\0\x01\0\0\0\0\0\0\0\x0c\0\0\0\x10\0\0\0\x58\0\0\0\x12\0\
\0\0\0\0\0\0\x70\0\0\0\x9d\0\0\0\x05\x94\0\0\x08\0\0\0\x70\0\0\0\x05\x02\0\0\
\x05\x9c\0\0\x30\0\0\0\x70\0\0\0\x39\x02\0\0\x02\xa0\0\0\x58\0\0\0\x70\0\0\0\
\x74\x02\0\0\x0c\xa4\0\0\x60\0\0\0\x70\0\0\0\x74\x02\0\0\x06\xa4\0\0\x68\0\0\0\
\x70\0\0\0\x8c\x02\0\0\x0a\x5c\0\0\x98\0\0\0\x70\0\0\0\xc6\x02\0\0\x06\x68\0\0\
\xa0\0\0\0\x70\0\0\0\xd4\x02\0\0\x10\x6c\0\0\xa8\0\0\0\x70\0\0\0\xd4\x02\0\0\
\x2b\x6c\0\0\xb0\0\0\0\x70\0\0\0\xd4\x02\0\0\x0e\x6c\0\0\xb8\0\0\0\x70\0\0\0\
\x05\x03\0\0\x03\x70\0\0\xe0\0\0\0\x70\0\0\0\x35\x03\0\0\x20\x74\0\0\xf0\0\0\0\
\x70\0\0\0\x35\x03\0\0\x03\x74\0\0\0\x01\0\0\x70\0\0\0\x70\x03\0\0\x46\x78\0\0\
\x08\x01\0\0\x70\0\0\0\x70\x03\0\0\x1e\x78\0\0\x18\x01\0\0\x70\0\0\0\x70\x03\0\
\0\x03\x78\0\0\x28\x01\0\0\x70\0\0\0\xc0\x03\0\0\x03\x7c\0\0\x40\x01\0\0\x70\0\
\0\0\x9d\0\0\0\x05\x94\0\0\x10\0\0\0\x58\0\0\0\x04\0\0\0\x08\0\0\0\x0d\0\0\0\0\
\x02\0\0\0\0\0\0\x30\0\0\0\x0d\0\0\0\x34\x02\0\0\0\0\0\0\x58\0\0\0\x0d\0\0\0\0\
\x02\0\0\0\0\0\0\0\x01\0\0\x0d\0\0\0\x34\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xb0\0\0\0\0\0\x02\0\x40\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x49\0\0\0\x01\
\0\x05\0\0\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\xb7\0\0\0\x01\0\x05\0\x0f\0\0\0\0\0\
\0\0\x1a\0\0\0\0\0\0\0\x30\0\0\0\x01\0\x05\0\x29\0\0\0\0\0\0\0\x12\0\0\0\0\0\0\
\0\0\0\0\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7c\0\0\0\x11\0\x03\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\
\0\0\0\x67\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xd1\0\0\0\x12\0\
\x02\0\0\0\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\
\0\x38\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x68\0\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\
\xb8\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\xa4\x03\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\
\xbc\x03\0\0\0\0\0\0\x0a\0\0\0\x07\0\0\0\xc8\x03\0\0\0\0\0\0\x0a\0\0\0\x07\0\0\
\0\xd4\x03\0\0\0\0\0\0\x0a\0\0\0\x07\0\0\0\xec\x03\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\x2c\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x50\
\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x70\0\0\0\
\0\0\0\0\0\0\0\0\x06\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x90\0\0\0\0\0\0\
\0\0\0\0\0\x06\0\0\0\xa0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xb0\0\0\0\0\0\0\0\0\0\
\0\0\x06\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xd0\0\0\0\0\0\0\0\0\0\0\0\
\x06\0\0\0\xe0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\x06\0\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x10\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\
\x20\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x30\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\
\x40\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x50\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\
\x6c\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x7c\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\
\x8c\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x9c\x01\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\
\xe5\x64\xe3\x64\xe4\x64\xda\x64\xdb\x64\xdc\x64\0\x2e\x72\x65\x6c\x6c\x73\x6d\
\x2f\x62\x70\x72\x6d\x5f\x63\x68\x65\x63\x6b\x5f\x73\x65\x63\x75\x72\x69\x74\
\x79\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\
\x6c\x6f\x67\x5f\x70\x72\x6f\x63\x65\x73\x73\x5f\x6e\x61\x6d\x65\x2e\x5f\x5f\
\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x63\x68\x65\x63\x6b\x5f\x61\x72\x67\x63\
\x30\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x62\x75\x66\x66\
\x65\x72\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\
\x63\x65\x6e\x73\x65\0\x6c\x73\x6d\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\
\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x42\x42\x30\x5f\x33\0\x5f\x5f\x5f\x5f\x63\
\x68\x65\x63\x6b\x5f\x61\x72\x67\x63\x30\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\
\x31\0\x63\x68\x65\x63\x6b\x5f\x61\x72\x67\x63\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1d\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\0\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x7d\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x01\0\0\0\0\0\
\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\0\0\
\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x01\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\0\0\0\x01\0\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x01\0\0\0\0\0\0\x3b\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xab\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xeb\x01\0\0\0\0\0\0\x87\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x27\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x72\x0a\0\0\0\0\0\0\xac\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x97\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x0c\0\
\0\0\0\0\0\x08\x01\0\0\0\0\0\0\x0d\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\
\0\0\0\0\x01\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0d\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\x08\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\xa7\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x0d\0\0\0\0\0\0\x50\0\
\0\0\0\0\0\0\x08\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x23\0\0\0\
\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x0d\0\0\0\0\0\0\x70\x01\0\0\0\0\
\0\0\x08\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x6e\0\0\0\x03\x4c\
\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0f\0\0\0\0\0\0\x0c\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8f\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x34\x0f\0\0\0\0\0\0\xdd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct lsm_bpf *lsm_bpf::open(const struct bpf_object_open_opts *opts) { return lsm_bpf__open_opts(opts); }
struct lsm_bpf *lsm_bpf::open_and_load() { return lsm_bpf__open_and_load(); }
int lsm_bpf::load(struct lsm_bpf *skel) { return lsm_bpf__load(skel); }
int lsm_bpf::attach(struct lsm_bpf *skel) { return lsm_bpf__attach(skel); }
void lsm_bpf::detach(struct lsm_bpf *skel) { lsm_bpf__detach(skel); }
void lsm_bpf::destroy(struct lsm_bpf *skel) { lsm_bpf__destroy(skel); }
const void *lsm_bpf::elf_bytes(size_t *sz) { return lsm_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
lsm_bpf__assert(struct lsm_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __LSM_BPF_SKEL_H__ */
